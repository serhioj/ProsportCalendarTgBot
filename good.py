import sqlite3
from datetime import datetime, timedelta
import requests
import json

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder

from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# Dictionary to track the last time the command was called
last_start_time = {}

# Rate limit in seconds
RATE_LIMIT_SECONDS = 60

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect(os.path.join(ROOT_DIR, 'user_data.db'))
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            phone_number TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

global events_data
events_data = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
global events_count
events_count = 0


@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # Check if user phone number is in the database
    conn = sqlite3.connect(os.path.join(ROOT_DIR, 'user_data.db'))
    cursor = conn.cursor()
    cursor.execute('''
        SELECT phone_number FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result is None:
        # Send a welcome message with a button to share the phone number
        button = types.KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard = types.ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True, one_time_keyboard=True)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ", reply_markup=keyboard)
    else:
        await send_event_info(user_id, message)




async def check_and_notify_users():
    while True:
        # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        await asyncio.sleep(10000)
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(os.path.join(ROOT_DIR, 'user_data.db'))
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, phone_number FROM users')
        users = cursor.fetchall()
        conn.close()

        for user_id, phone_number in users:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = requests.get(f"https://dev-level.ru/api/v1/events-by-phone/{phone_number}")
            if response.status_code == 200:
                events = response.json()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
                for event in events:
                    start_date = event['startTime']
                    current_date = datetime.now()

                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É d.m.y
                    formatted_date = current_date.strftime("%d.%m.%y")

                    if start_date == formatted_date:
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"üïí <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b>\n\n"
                                 f"<b>–°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>: {event['name']}\n"
                                 f"<b>–°–ø–æ—Ä—Ç</b>: {event['sport']}\n"
                                 f"<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</b> {event['discipline']}\n"
                                 f"<b>–ü–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç:</b> {event['genderAge']}\n"
                                 f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {event['country']}, {event['location']}\n"
                                 f"<b>–ù–∞—á–∞–ª–æ</b>: {start_date}\n"
                                 f"<b>–ö–æ–Ω–µ—Ü</b>: {event["endTime"]}",
                            parse_mode="HTML"
                        )

async def send_event_info(user_id, message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û –Ω–∞—Å", callback_data="about_us")
    keyboard.button(text="–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="repeat_request")
    await message.answer(
        "<b>Prosport Calendar</b> ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏!",
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data == "about_us")
async def handle_about(callback_query: CallbackQuery):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="repeat_request")
    
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        "<b>Prosport Calendar</b> ‚Äî —ç—Ç–æ –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏."
        "–° –Ω–∞—à–∏–º Telegram-–±–æ—Ç–æ–º –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!\n\n"

        "üìÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:</b> –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, "
        "—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–π –º–∞—Ç—á –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"
        "üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. "
        "–£–∑–Ω–∞–≤–∞–π—Ç–µ –æ–±–æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–µ—Ä–≤—ã–º–∏.\n\n"
        "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Å <b><a href='dev-level.ru'>Prosport Calendar!</a></b>"
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        text=text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "repeat_request")
async def handle_repeat_request(callback_query: CallbackQuery):
    global events_data
    global events_count
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(os.path.join(ROOT_DIR, 'user_data.db'))
    cursor = conn.cursor()
    cursor.execute('''
        SELECT phone_number FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()

    conn.close()
    if result is not None:
        phone_number = result[0]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å user_id –∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        response = requests.get(f"https://dev-level.ru/api/v1/events-by-phone/{phone_number}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π events_data
        events_data = response.json()  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(events_data)
        events_count = len(events_data)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π

        print(events_count)

        if response.status_code==200:
            # events_count = response.json().get("events_count", 0)
            keyboard = InlineKeyboardBuilder() 
            keyboard.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all")
            keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="change_phone")
            keyboard.button(text="–û –Ω–∞—Å", callback_data="about_us")
            
            if isinstance(callback_query, CallbackQuery):
                await callback_query.message.edit_text(
                    f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{phone_number}\n\n" 
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã: <b>{events_count}</b>.",
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
            elif isinstance(callback_query, Message):
                await callback_query.answer(
                    f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{phone_number}.\n\n" 
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã: <b>{events_count}</b>.",
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
            await callback_query.answer()
        
        else:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat_request")
            keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="change_phone")             #–ü–û–ú–ï–ù–Ø–õ
            if callback_query.message.text != "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.":
                await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard.as_markup())
    else:
        await callback_query.message.edit_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "show_all")
async def show_all(callback_query: CallbackQuery):
    global events_data
    global events_count

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ eventsData
    current_index = 0
    event = events_data[current_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    message_str = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event['name']}\n"
        f"<b>–°–ø–æ—Ä—Ç:</b> {event['sport']}\n"
        f"<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</b> {event['discipline']}\n"
        f"<b>–ü–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç:</b> {event['genderAge']}\n"
        f"<b>–î–∞—Ç–∞:</b> {event['startTime']} - {event['endTime']}\n"
        f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {event['country']}, {event['location']}\n"
        f"<b>–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {event['participants']}\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ª–µ–¥—É—é—â–µ–µ" –∏ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ì–ª–∞–≤–Ω–∞—è", callback_data="repeat_request")
    if current_index + 1 < len(events_data):
        keyboard.button(text="–°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"show_event:{current_index + 1}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(message_str, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("show_event:"))
async def show_event(callback_query: CallbackQuery):
    global events_data
    global events_count
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ callback data
    data = callback_query.data.split(":")
    current_index = int(data[1]) if len(data) > 1 else 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    if 0 <= current_index < len(events_data):
        event = events_data[current_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        message_str = (
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event['name']}\n"
            f"<b>–°–ø–æ—Ä—Ç:</b> {event['sport']}\n"
            f"<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</b> {event['discipline']}\n"
            f"<b>–ü–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç:</b> {event['genderAge']}\n"
            f"<b>–î–∞—Ç–∞:</b> {event['startTime']} - {event['endTime']}\n"
            f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {event['country']}, {event['location']}\n"
            f"<b>–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {event['participants']}\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        if current_index > 0:
            keyboard.button(text="–ù–∞–∑–∞–¥", callback_data=f"show_event:{current_index - 1}")
        keyboard.button(text="–ì–ª–∞–≤–Ω–∞—è", callback_data="repeat_request")
        if current_index + 1 < len(events_data):
            keyboard.button(text="–°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"show_event:{current_index + 1}")


        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(message_str, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        await callback_query.answer()
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
        await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–±—ã—Ç–∏—è.", show_alert=True)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ChangePhoneState(StatesGroup):
    waiting_for_phone = State()

@dp.callback_query(lambda c: c.data == "change_phone")
async def change_phone(callback_query: CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(ChangePhoneState.waiting_for_phone)
    await callback_query.answer()

@dp.message(StateFilter(ChangePhoneState.waiting_for_phone))
async def handle_new_phone(message: Message, state: FSMContext):
    user_id = message.from_user.id
    new_phone = message.text.strip().replace("+", "")  # –£–¥–∞–ª—è–µ–º "+" –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (new_phone.startswith("7") and len(new_phone) == 11 and new_phone.isdigit()) or \
       (new_phone.startswith("8") and len(new_phone) == 11 and new_phone.isdigit()):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(os.path.join(ROOT_DIR, 'user_data.db'))
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users
            SET phone_number = ?
            WHERE user_id = ?
        ''', (new_phone, user_id))
        conn.commit()
        conn.close()

        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
        await send_event_info(user_id, message)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    else:

        keyboard = InlineKeyboardBuilder() 
        keyboard.button(text="–ù–∞–∑–∞–¥", callback_data="repeat_request")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard.as_markup())



@dp.message(F.contact)
async def handle_contact(message: Message):
    user_id = message.from_user.id
    contact = message.contact

    if contact.user_id == user_id:
        # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª "+" –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = contact.phone_number.replace("+", "")
        
        # Save user phone number in the database
        conn = sqlite3.connect(os.path.join(ROOT_DIR, 'user_data.db'))
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, phone_number) VALUES (?, ?)
        ''', (user_id, phone_number))
        conn.commit()
        conn.close()

        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=types.ReplyKeyboardRemove()) #–ü–æ–º–µ–Ω—è–ª
        await send_event_info(user_id, message)

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")



async def main():
    asyncio.create_task(check_and_notify_users())
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())